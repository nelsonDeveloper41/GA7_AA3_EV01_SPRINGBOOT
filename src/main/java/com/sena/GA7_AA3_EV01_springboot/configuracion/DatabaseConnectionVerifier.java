package com.sena.GA7_AA3_EV01_springboot.configuracion;

import com.sena.GA7_AA3_EV01_springboot.modelo.Proyecto;
import com.sena.GA7_AA3_EV01_springboot.servicio.ProyectoService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.time.LocalDateTime;

@Component
@RequiredArgsConstructor
@Slf4j
public class DatabaseConnectionVerifier implements CommandLineRunner {

    // Inyecci√≥n de dependencias para verificaci√≥n
    private final DataSource dataSource;
    private final ProyectoService proyectoService;

    @Override
    public void run(String... args) throws Exception {
        log.info("\n" + "=".repeat(70));
        log.info("üîç VERIFICANDO CONEXI√ìN A BASE DE DATOS");
        log.info("=".repeat(70));

        try {
            // Verificar conexi√≥n directa a la base de datos
            verificarConexionDirecta();

            // Verificar funcionalidad de JPA/Hibernate
            verificarFuncionalidadJPA();

            // Crear datos de prueba si es necesario
            crearDatosDePruebaSiEsNecesario();

            // Mostrar estad√≠sticas actuales
            mostrarEstadisticasBaseDatos();

            log.info("=".repeat(70));
            log.info("‚úÖ VERIFICACI√ìN DE BASE DE DATOS COMPLETADA EXITOSAMENTE");
            log.info("=".repeat(70));

        } catch (Exception e) {
            log.error("=".repeat(70));
            log.error("‚ùå ERROR EN VERIFICACI√ìN DE BASE DE DATOS");
            log.error("=".repeat(70));
            log.error("Error: {}", e.getMessage(), e);
            throw e;
        }
    }

    // Verificar conexi√≥n directa usando DataSource
    private void verificarConexionDirecta() throws Exception {
        log.info("üì° Verificando conexi√≥n directa a MySQL...");

        try (Connection connection = dataSource.getConnection()) {
            DatabaseMetaData metaData = connection.getMetaData();

            log.info("‚úÖ Conexi√≥n establecida exitosamente");
            log.info("   ‚îú‚îÄ‚îÄ üóÑÔ∏è  Base de datos: {}", metaData.getDatabaseProductName());
            log.info("   ‚îú‚îÄ‚îÄ üìä Versi√≥n: {}", metaData.getDatabaseProductVersion());
            log.info("   ‚îú‚îÄ‚îÄ üîó URL: {}", metaData.getURL());
            log.info("   ‚îú‚îÄ‚îÄ üë§ Usuario: {}", metaData.getUserName());
            log.info("   ‚îú‚îÄ‚îÄ üöÄ Driver: {}", metaData.getDriverName());
            log.info("   ‚îî‚îÄ‚îÄ üìà Versi√≥n Driver: {}", metaData.getDriverVersion());

        } catch (Exception e) {
            log.error("‚ùå Error al conectar con la base de datos: {}", e.getMessage());
            throw e;
        }
    }

    // Verificar que JPA/Hibernate funciona correctamente
    private void verificarFuncionalidadJPA() {
        log.info("üèóÔ∏è Verificando funcionalidad de JPA/Hibernate...");

        try {
            // Intentar contar registros (esto activar√° la creaci√≥n de tablas si no existen)
            long totalProyectos = proyectoService.contarTotalProyectos();
            log.info("‚úÖ JPA/Hibernate funcionando correctamente");
            log.info("   ‚îî‚îÄ‚îÄ üìä Proyectos en base de datos: {}", totalProyectos);

        } catch (Exception e) {
            log.error("‚ùå Error en funcionalidad JPA: {}", e.getMessage());
            throw e;
        }
    }

    // Crear datos de prueba si la base de datos est√° vac√≠a
    private void crearDatosDePruebaSiEsNecesario() {
        log.info("üß™ Verificando necesidad de datos de prueba...");

        long totalProyectos = proyectoService.contarTotalProyectos();

        if (totalProyectos == 0) {
            log.info("üìù Base de datos vac√≠a. Creando datos de prueba...");
            crearProyectosDePrueba();
        } else {
            log.info("‚úÖ Base de datos contiene {} proyecto(s) existente(s)", totalProyectos);
        }
    }

    // Crear proyectos de ejemplo para demostraci√≥n acad√©mica
    private void crearProyectosDePrueba() {
        try {
            // Proyecto 1: Torre Empresarial
            Proyecto proyecto1 = Proyecto.builder()
                    .nombreObra("Torre Empresarial Centro")
                    .direccionObra("Carrera 15 # 93-47, Bogot√°, Colombia")
                    .nitCliente("900123456-7")
                    .nombreCliente("Constructora Bogot√° S.A.S")
                    .emailContacto("proyectos@constructorabogota.com")
                    .telefonoContacto("3201234567")
                    .estado("ACTIVO")
                    .build();

            proyectoService.crearProyecto(proyecto1);
            log.info("   ‚úÖ Creado: {}", proyecto1.getNombreObra());

            // Proyecto 2: Centro Comercial
            Proyecto proyecto2 = Proyecto.builder()
                    .nombreObra("Centro Comercial Plaza Norte")
                    .direccionObra("Autopista Norte Km 18, Ch√≠a, Cundinamarca")
                    .nitCliente("800987654-3")
                    .nombreCliente("Desarrollos Inmobiliarios del Norte Ltda")
                    .emailContacto("info@desarrollosnorte.co")
                    .telefonoContacto("3107654321")
                    .estado("ACTIVO")
                    .build();

            proyectoService.crearProyecto(proyecto2);
            log.info("   ‚úÖ Creado: {}", proyecto2.getNombreObra());

            // Proyecto 3: Conjunto Residencial (Pausado)
            Proyecto proyecto3 = Proyecto.builder()
                    .nombreObra("Conjunto Residencial Los Cerezos")
                    .direccionObra("Calle 127 # 52-14, Bogot√°, Colombia")
                    .nitCliente("700456789-1")
                    .nombreCliente("Vivienda y Desarrollo S.A.")
                    .emailContacto("construccion@viviendaydesarrollo.com")
                    .telefonoContacto("3159876543")
                    .estado("PAUSADO")
                    .build();

            proyectoService.crearProyecto(proyecto3);
            log.info("   ‚úÖ Creado: {}", proyecto3.getNombreObra());

            // Proyecto 4: Proyecto Finalizado
            Proyecto proyecto4 = Proyecto.builder()
                    .nombreObra("Edificio de Oficinas Zona Rosa")
                    .direccionObra("Calle 85 # 12-34, Bogot√°, Colombia")
                    .nitCliente("600321987-5")
                    .nombreCliente("Inversiones Zona Rosa S.A.S")
                    .emailContacto("obras@inversioneszonarosa.com")
                    .telefonoContacto("3142345678")
                    .estado("FINALIZADO")
                    .build();

            proyectoService.crearProyecto(proyecto4);
            log.info("   ‚úÖ Creado: {}", proyecto4.getNombreObra());

            // Proyecto 5: Proyecto Cancelado
            Proyecto proyecto5 = Proyecto.builder()
                    .nombreObra("Hotel Boutique La Candelaria")
                    .direccionObra("Carrera 4 # 12-15, Bogot√°, Colombia")
                    .nitCliente("500654321-9")
                    .nombreCliente("Turismo y Hoteler√≠a Colombia S.A.")
                    .emailContacto("desarrollo@turismohoteleria.co")
                    .telefonoContacto("3113456789")
                    .estado("CANCELADO")
                    .build();

            proyectoService.crearProyecto(proyecto5);
            log.info("   ‚úÖ Creado: {}", proyecto5.getNombreObra());

            log.info("üéØ Datos de prueba creados exitosamente (5 proyectos)");

        } catch (Exception e) {
            log.error("‚ùå Error creando datos de prueba: {}", e.getMessage());
            // No lanzamos excepci√≥n aqu√≠ para no interrumpir el inicio de la aplicaci√≥n
        }
    }

    // Mostrar estad√≠sticas actuales de la base de datos
    private void mostrarEstadisticasBaseDatos() {
        log.info("üìä Estad√≠sticas actuales de la base de datos:");

        try {
            var estadisticas = proyectoService.obtenerEstadisticas();

            log.info("   ‚îú‚îÄ‚îÄ üìà Total proyectos: {}", estadisticas.totalProyectos());
            log.info("   ‚îú‚îÄ‚îÄ üü¢ Proyectos activos: {}", estadisticas.proyectosActivos());
            log.info("   ‚îú‚îÄ‚îÄ üü° Proyectos pausados: {}", estadisticas.proyectosPausados());
            log.info("   ‚îú‚îÄ‚îÄ ‚úÖ Proyectos finalizados: {}", estadisticas.proyectosFinalizados());
            log.info("   ‚îî‚îÄ‚îÄ ‚ùå Proyectos cancelados: {}", estadisticas.proyectosCancelados());

            // Mostrar informaci√≥n de tiempo
            log.info("üìÖ Informaci√≥n de verificaci√≥n:");
            log.info("   ‚îî‚îÄ‚îÄ ‚è∞ Verificaci√≥n realizada: {}", LocalDateTime.now());

        } catch (Exception e) {
            log.error("‚ùå Error obteniendo estad√≠sticas: {}", e.getMessage());
        }
    }

}

/*
================================================================================
DOCUMENTACI√ìN COMPLETA DE DatabaseConnectionVerifier.java
================================================================================

PROP√ìSITO:
----------
Componente que verifica autom√°ticamente la conexi√≥n a la base de datos al iniciar
la aplicaci√≥n Spring Boot. Proporciona informaci√≥n detallada sobre el estado de
la conexi√≥n, crea datos de prueba si es necesario y muestra estad√≠sticas para
validaci√≥n acad√©mica.

INFORMACI√ìN ACAD√âMICA:
----------------------
Programa:     An√°lisis y Desarrollo de Software - SENA
Evidencia:    GA7-220501096-AA3-EV01
Funcionalidad: Verificaci√≥n de conexi√≥n y inicializaci√≥n de datos
Framework:    Spring Boot 3.2.0 + JPA/Hibernate
Autor:        Nelson Rodriguez

PATR√ìN IMPLEMENTADO:
-------------------
- CommandLineRunner: Se ejecuta autom√°ticamente despu√©s del inicio de Spring Boot
- Dependency Injection: Inyecci√≥n de DataSource y ProyectoService
- Fail-Fast: Detecta problemas de conexi√≥n inmediatamente al inicio

ANOTACIONES UTILIZADAS:
----------------------

1. @Component:
   - Registra la clase como bean de Spring
   - Permite detecci√≥n autom√°tica en el escaneo de componentes
   - Se ejecuta como parte del ciclo de vida de la aplicaci√≥n

2. @RequiredArgsConstructor (Lombok):
   - Genera constructor con campos final autom√°ticamente
   - Inyecci√≥n de dependencias sin @Autowired expl√≠cito
   - Inmutabilidad de dependencias inyectadas

3. @Slf4j (Lombok):
   - Genera logger autom√°ticamente
   - Facilita logging detallado para verificaci√≥n acad√©mica

FUNCIONALIDADES IMPLEMENTADAS:
-----------------------------

1. VERIFICACI√ìN DE CONEXI√ìN DIRECTA:
   - Obtiene conexi√≥n directa desde DataSource
   - Extrae metadatos de la base de datos
   - Muestra informaci√≥n t√©cnica: BD, versi√≥n, driver, usuario

2. VERIFICACI√ìN DE JPA/HIBERNATE:
   - Prueba funcionalidad de Spring Data JPA
   - Verifica que las tablas se crean autom√°ticamente
   - Confirma que las consultas funcionan correctamente

3. CREACI√ìN DE DATOS DE PRUEBA:
   - Detecta si la base de datos est√° vac√≠a
   - Crea 5 proyectos de ejemplo para demostraci√≥n
   - Incluye diferentes estados: ACTIVO, PAUSADO, FINALIZADO, CANCELADO

4. ESTAD√çSTICAS Y M√âTRICAS:
   - Muestra conteos por estado
   - Informaci√≥n de tiempo de verificaci√≥n
   - Logs detallados para seguimiento acad√©mico

DATOS DE PRUEBA CREADOS:
-----------------------

1. Torre Empresarial Centro (ACTIVO):
   - Cliente: Constructora Bogot√° S.A.S
   - NIT: 900123456-7
   - Ubicaci√≥n: Bogot√° Centro

2. Centro Comercial Plaza Norte (ACTIVO):
   - Cliente: Desarrollos Inmobiliarios del Norte Ltda
   - NIT: 800987654-3
   - Ubicaci√≥n: Ch√≠a, Cundinamarca

3. Conjunto Residencial Los Cerezos (PAUSADO):
   - Cliente: Vivienda y Desarrollo S.A.
   - NIT: 700456789-1
   - Ubicaci√≥n: Bogot√° Norte

4. Edificio de Oficinas Zona Rosa (FINALIZADO):
   - Cliente: Inversiones Zona Rosa S.A.S
   - NIT: 600321987-5
   - Ubicaci√≥n: Zona Rosa, Bogot√°

5. Hotel Boutique La Candelaria (CANCELADO):
   - Cliente: Turismo y Hoteler√≠a Colombia S.A.
   - NIT: 500654321-9
   - Ubicaci√≥n: La Candelaria, Bogot√°

INFORMACI√ìN EXTRA√çDA DE LA BASE DE DATOS:
----------------------------------------

1. Metadatos de Conexi√≥n:
   - Nombre y versi√≥n de la base de datos (MySQL)
   - URL de conexi√≥n completa
   - Usuario conectado
   - Driver JDBC utilizado y versi√≥n

2. Estado de JPA/Hibernate:
   - Confirmaci√≥n de creaci√≥n autom√°tica de tablas
   - Verificaci√≥n de consultas b√°sicas
   - Conteo inicial de registros

3. Estad√≠sticas Operacionales:
   - Total de proyectos por estado
   - Timestamp de verificaci√≥n
   - Logs de operaciones realizadas

LOGS GENERADOS:
--------------

1. Logs Informativos:
   - Inicio y fin de verificaci√≥n
   - Informaci√≥n de conexi√≥n exitosa
   - Estad√≠sticas de datos creados

2. Logs de Debug:
   - Metadatos t√©cnicos de la base de datos
   - Detalles de creaci√≥n de proyectos

3. Logs de Error:
   - Problemas de conexi√≥n
   - Errores en creaci√≥n de datos
   - Excepciones con stack trace

MANEJO DE ERRORES:
-----------------

1. Errores Cr√≠ticos (interrumpen inicio):
   - Falla de conexi√≥n a base de datos
   - Error en verificaci√≥n de JPA

2. Errores No Cr√≠ticos (no interrumpen inicio):
   - Error en creaci√≥n de datos de prueba
   - Error en obtenci√≥n de estad√≠sticas

INTEGRACI√ìN CON SPRING BOOT:
---------------------------

1. Ciclo de Vida:
   - Se ejecuta despu√©s de que Spring Boot complete la inicializaci√≥n
   - Antes de que la aplicaci√≥n est√© lista para recibir requests
   - Permite detectar problemas antes de uso en producci√≥n

2. Dependencias:
   - DataSource: Para verificaci√≥n directa de conexi√≥n
   - ProyectoService: Para verificaci√≥n de funcionalidad de negocio

VENTAJAS PARA DESARROLLO Y TESTING:
----------------------------------

1. Detecci√≥n Temprana de Problemas:
   - Identifica problemas de configuraci√≥n inmediatamente
   - Evita errores silenciosos durante ejecuci√≥n

2. Datos Consistentes para Testing:
   - Siempre hay datos de prueba disponibles
   - Estados variados para probar diferentes escenarios

3. Informaci√≥n T√©cnica Visible:
   - Los desarrolladores ven estado de conexi√≥n en logs
   - Facilita debugging y verificaci√≥n

CONFIGURACI√ìN REQUERIDA:
-----------------------

1. application.properties:
   - Configuraci√≥n correcta de datasource MySQL
   - Credenciales de base de datos v√°lidas
   - Configuraci√≥n de JPA/Hibernate

2. Base de Datos:
   - MySQL server corriendo (XAMPP)
   - Base de datos cartillasacerowebga7aa3ev01 accesible
   - Permisos adecuados para el usuario

EJEMPLOS DE SALIDA DE LOGS:
--------------------------
```
======================================================================
üîç VERIFICANDO CONEXI√ìN A BASE DE DATOS
======================================================================
üì° Verificando conexi√≥n directa a MySQL...
‚úÖ Conexi√≥n establecida exitosamente
   ‚îú‚îÄ‚îÄ üóÑÔ∏è  Base de datos: MySQL
   ‚îú‚îÄ‚îÄ üìä Versi√≥n: 8.0.30
   ‚îú‚îÄ‚îÄ üîó URL: jdbc:mysql://localhost:3306/cartillasacerowebga7aa3ev01
   ‚îî‚îÄ‚îÄ üë§ Usuario: root

üèóÔ∏è Verificando funcionalidad de JPA/Hibernate...
‚úÖ JPA/Hibernate funcionando correctamente
   ‚îî‚îÄ‚îÄ üìä Proyectos en base de datos: 5

üìä Estad√≠sticas actuales de la base de datos:
   ‚îú‚îÄ‚îÄ üìà Total proyectos: 5
   ‚îú‚îÄ‚îÄ üü¢ Proyectos activos: 2
   ‚îú‚îÄ‚îÄ üü° Proyectos pausados: 1
   ‚îú‚îÄ‚îÄ ‚úÖ Proyectos finalizados: 1
   ‚îî‚îÄ‚îÄ ‚ùå Proyectos cancelados: 1
======================================================================
‚úÖ VERIFICACI√ìN DE BASE DE DATOS COMPLETADA EXITOSAMENTE
======================================================================
```

EVIDENCIA DE COMPETENCIAS:
-------------------------
1. üéØ Implementaci√≥n de CommandLineRunner
2. üèóÔ∏è Verificaci√≥n de configuraci√≥n de DataSource
3. üíæ Validaci√≥n de funcionalidad JPA/Hibernate
4. üìù Creaci√≥n program√°tica de datos de prueba
5. üîß Manejo de excepciones y logging
6. üß™ Preparaci√≥n de entorno para testing
7. üìä Generaci√≥n de m√©tricas y estad√≠sticas

UTILIDAD ACAD√âMICA:
------------------
- Demuestra comprensi√≥n de configuraci√≥n de base de datos
- Muestra dominio de Spring Boot lifecycle
- Evidencia capacidad de crear datos de prueba
- Proporciona informaci√≥n t√©cnica detallada para evaluaci√≥n
- Facilita verificaci√≥n inmediata de funcionalidad

AUTOR: Nelson Rodriguez
EVIDENCIA: GA7-220501096-AA3-EV01
FECHA: 2025-07-07
VERSI√ìN: 3.0 (Spring Boot Database Verification)

================================================================================
*/