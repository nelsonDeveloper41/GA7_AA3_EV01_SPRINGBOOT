# ===============================================================================
# CONFIGURACIÓN SPRING BOOT - CARTILLAS ACERO WEB
# Evidencia: GA7-220501096-AA3-EV01
# Autor:     Nelson Rodriguez
# Programa:  Análisis y Desarrollo de Software - SENA
# ===============================================================================

# --- Perfil Activo ---
spring.profiles.active=dev


# ===============================================================================
# 1. CONFIGURACIÓN BÁSICA DE LA APLICACIÓN
# ===============================================================================
spring.application.name=CartillasAceroWeb-SpringBoot
spring.application.description=Evidencia GA7-AA3-EV01 - Migración de Servlets/JSP a Spring Boot


# ===============================================================================
# 2. SERVIDOR WEB (TOMCAT EMBEBIDO)
# ===============================================================================
server.port=8080
server.servlet.context-path=/
server.servlet.session.timeout=30m
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true


# ===============================================================================
# 3. BASE DE DATOS (MYSQL & HIKARI CP)
# ===============================================================================
# --- Conexión a MySQL (XAMPP) ---
spring.datasource.url=jdbc:mysql://localhost:3306/cartillasacerowebga7aa3ev01?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- Pool de Conexiones HikariCP ---
spring.datasource.hikari.pool-name=CartillasAceroWebPool
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.max-lifetime=1800000


# ===============================================================================
# 4. PERSISTENCIA (JPA / HIBERNATE)
# ===============================================================================
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


# ===============================================================================
# 5. VISTAS (THYMELEAF & RECURSOS ESTÁTICOS)
# ===============================================================================
# --- Thymeleaf ---
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8

# --- Recursos Estáticos (CSS, JS, etc.) ---
spring.web.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/static/**

# --- WebJars (Bootstrap, jQuery desde Maven) ---
spring.mvc.webjars-path-pattern=/webjars/**


# ===============================================================================
# 6. LOGGING Y DESARROLLO
# ===============================================================================
# --- Logging ---
logging.level.root=INFO
logging.level.com.sena.GA7_AA3_EV01_springboot=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# --- DevTools (Live Reload) ---
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true


# ===============================================================================
# 7. PROPIEDADES PERSONALIZADAS DE LA APLICACIÓN
# ===============================================================================
# --- Información de la evidencia ---
app.evidencia.codigo=GA7-220501096-AA3-EV01
app.evidencia.autor=Nelson Rodriguez
app.evidencia.programa=Análisis y Desarrollo de Software

# --- Configuración de Paginación ---
app.pagination.size=10

# --- Patrones de Validación ---
app.validation.nit.pattern=^[0-9]+-[0-9kK]$
app.validation.telefono.pattern=^[0-9]{7,10}$

# --- Mensajes de la aplicación ---
app.messages.success.create=Proyecto creado exitosamente
app.messages.success.update=Proyecto actualizado exitosamente
app.messages.success.delete=Proyecto eliminado exitosamente
app.messages.error.not-found=Proyecto no encontrado
app.messages.error.duplicate-nit=Ya existe un proyecto con este NIT


###############################################################################
#                                                                             #
#           DOCUMENTACIÓN DETALLADA Y NOTAS ACADÉMICAS DE CONFIGURACIÓN         #
#                                                                             #
###############################################################################
#
# Este bloque contiene las explicaciones detalladas de las propiedades usadas
# arriba. Sirve como material de consulta y para la sustentación de la evidencia.
#
# -------------------------------------------------------------------------------
# ## 3. BASE DE DATOS (MYSQL & HIKARI CP) ##
# -------------------------------------------------------------------------------
# spring.datasource.url: Define la cadena de conexión.
#   - createDatabaseIfNotExist=true: Crea la BD 'cartillasacerowebga7aa3ev01' si no existe.
#   - useSSL=false: Desactiva SSL, común en entornos de desarrollo local.
#   - serverTimezone=UTC: Estandariza la zona horaria para evitar errores de fecha/hora.
#   - allowPublicKeyRetrieval=true: Requerido por versiones recientes del driver de MySQL.
# spring.datasource.hikari.*: HikariCP es el pool de conexiones de alto rendimiento
# que Spring Boot usa por defecto. Optimiza la reutilización de conexiones a la BD,
# siendo mucho más eficiente que abrir y cerrar conexiones manualmente como en JDBC clásico.
#
# -------------------------------------------------------------------------------
# ## 4. PERSISTENCIA (JPA / HIBERNATE) ##
# -------------------------------------------------------------------------------
# spring.jpa.hibernate.ddl-auto: Controla la generación del esquema de la base de datos.
#   - create-drop: Crea tablas al iniciar y las borra al apagar. Ideal para tests y desarrollo temprano.
#   - update: Actualiza las tablas existentes si hay cambios en las entidades @Entity. No borra datos. RECOMENDADO.
#   - validate: Comprueba si las tablas coinciden con las entidades, pero no hace cambios. Lanza un error si no coinciden.
#   - none: Desactiva la gestión automática. Para producción, donde se usan scripts de migración (Flyway/Liquibase).
# spring.jpa.hibernate.naming.physical-strategy: Define cómo se nombran las tablas y columnas.
#   - PhysicalNamingStrategyStandardImpl: Mantiene los nombres tal como están en las entidades (Ej: `fechaCreacion` -> `fechaCreacion`).
#   - SpringPhysicalNamingStrategy: Convierte camelCase a snake_case (Ej: `fechaCreacion` -> `fecha_creacion`).
#
# -------------------------------------------------------------------------------
# ## 5. VISTAS (THYMELEAF & RECURSOS ESTÁTICOS) ##
# -------------------------------------------------------------------------------
# spring.thymeleaf.cache=false: Desactiva la caché de plantillas HTML. En desarrollo, esto
# permite ver los cambios en los archivos .html sin tener que reiniciar el servidor. En
# producción, se debe cambiar a 'true' para un mejor rendimiento.
#
# -------------------------------------------------------------------------------
# ## 6. LOGGING Y DESARROLLO ##
# -------------------------------------------------------------------------------
# logging.level.*: Define el nivel de detalle de los logs.
#   - TRACE: El más detallado.
#   - DEBUG: Para información de depuración (ej. valores de parámetros SQL).
#   - INFO: Eventos importantes del ciclo de vida de la aplicación (por defecto).
#   - WARN: Advertencias sobre situaciones potencialmente problemáticas.
#   - ERROR: Errores que no detienen la aplicación.
# spring.devtools.*: Habilita la recarga en caliente (hot reload). Cuando guardas un
# cambio en un archivo .java, DevTools reinicia la aplicación automáticamente en
# segundo plano, ahorrando mucho tiempo de desarrollo.
#
###############################################################################=================================